{"ast":null,"code":"var _jsxFileName = \"D:\\\\cursor ai\\\\smart assistance for productivity\\\\client\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport NewsGrid from './NewsGrid';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [news, setNews] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [activeCategory, setActiveCategory] = useState('all');\n  const [language, setLanguage] = useState('en');\n  const categories = ['all', 'politics', 'technology', 'sports', 'business'];\n  useEffect(() => {\n    const getNews = async () => {\n      await fetchNews();\n    };\n    getNews();\n  }, [activeCategory, language]);\n  const fetchNews = async () => {\n    try {\n      setLoading(true);\n      // Simulated data for now - replace with actual API call\n      const mockData = [{\n        _id: '1',\n        title: 'Sample News Article',\n        summary: 'This is a sample news article summary...',\n        category: 'technology',\n        sentiment: 'positive',\n        confidence: 0.85,\n        source: 'Tech News',\n        publishedAt: new Date()\n      }];\n      setNews(mockData);\n    } catch (error) {\n      console.error('Error fetching news:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"AI News Aggregator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"category-filters\",\n          children: categories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `category-btn ${activeCategory === category ? 'active' : ''}`,\n            onClick: () => setActiveCategory(category),\n            children: category.charAt(0).toUpperCase() + category.slice(1)\n          }, category, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: language,\n          onChange: e => setLanguage(e.target.value),\n          className: \"language-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"en\",\n            children: \"English\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"hi\",\n            children: \"Hindi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(NewsGrid, {\n      articles: news\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"h0GJjHkNDkwySslBKgxmvbmAZlM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","NewsGrid","jsxDEV","_jsxDEV","Dashboard","_s","news","setNews","loading","setLoading","activeCategory","setActiveCategory","language","setLanguage","categories","getNews","fetchNews","mockData","_id","title","summary","category","sentiment","confidence","source","publishedAt","Date","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","charAt","toUpperCase","slice","value","onChange","e","target","articles","_c","$RefreshReg$"],"sources":["D:/cursor ai/smart assistance for productivity/client/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport NewsGrid from './NewsGrid';\nimport './Dashboard.css';\n\nconst Dashboard = () => {\n  const [news, setNews] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [activeCategory, setActiveCategory] = useState('all');\n  const [language, setLanguage] = useState('en');\n\n  const categories = [\n    'all', 'politics', 'technology', 'sports', 'business'\n  ];\n\n  useEffect(() => {\n    const getNews = async () => {\n      await fetchNews();\n    };\n    getNews();\n  }, [activeCategory, language]);\n\n  const fetchNews = async () => {\n    try {\n      setLoading(true);\n      // Simulated data for now - replace with actual API call\n      const mockData = [\n        {\n          _id: '1',\n          title: 'Sample News Article',\n          summary: 'This is a sample news article summary...',\n          category: 'technology',\n          sentiment: 'positive',\n          confidence: 0.85,\n          source: 'Tech News',\n          publishedAt: new Date(),\n        }\n      ];\n      setNews(mockData);\n    } catch (error) {\n      console.error('Error fetching news:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <h1>AI News Aggregator</h1>\n        <div className=\"controls\">\n          <div className=\"category-filters\">\n            {categories.map(category => (\n              <button\n                key={category}\n                className={`category-btn ${activeCategory === category ? 'active' : ''}`}\n                onClick={() => setActiveCategory(category)}\n              >\n                {category.charAt(0).toUpperCase() + category.slice(1)}\n              </button>\n            ))}\n          </div>\n          <select\n            value={language}\n            onChange={(e) => setLanguage(e.target.value)}\n            className=\"language-select\"\n          >\n            <option value=\"en\">English</option>\n            <option value=\"hi\">Hindi</option>\n          </select>\n        </div>\n      </div>\n\n      {loading ? (\n        <div className=\"loader\">Loading...</div>\n      ) : (\n        <NewsGrid articles={news} />\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}